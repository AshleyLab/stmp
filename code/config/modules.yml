testing:
    Test_Dataset_Path: '../data/test/input_data/genome_in_a_bottle/subset.rs.vcf'
    Default_Test_Output_Dir: '../data/test/output_unverified/genome_in_a_bottle/subset'
    
annotation:
    #Parameter_Annovar: # Annovar default parameters. Currently unused but may be used in a future release.
#    Annovar_Path: '../third_party/annovar' # relative to stmp.py. Currently unused but will likely be used in a future release.
    Snpeff_Path: '../third_party/snpeff/snpEff' # relative to stmp.py
    Snpeff_Memory: '6g'
    Consensus_Column_Insertion_Offset: 10 # position to insert consensus columns (including vcf FORMAT extracted fields) at, starting from 0
    Consensus_Column_Suffix: 'Summary'
    Consensus_Criteria:
        Max_Allele_Freq: 'Max_Freq' # find the greatest value as opposed to default behavior of finding the first non-empty/unknown value from the specified datasets
        # from http://doc-openbio.readthedocs.org/projects/annovar/en/latest/user-guide/gene/
        Function: [
    'exonic', 'splicing', # precedence 1
    'ncRNA', # precendence 2
    'UTR5', 'UTR3', # precedence 3
    'intronic', # precedence 4
    'upstream', 'downstream', # precedence 5
    'intergenic', # precedence 6
                   ]
        ExonicFunction: [
    'frameshift insertion', # precedence 1
    'frameshift deletion', # 2
    'frameshift block substitution', #...
    'stopgain',
    'stoploss',
    'nonframeshift insertion',
    'nonframeshift deletion',
    'nonframeshift block substitution',
    'nonsynonymous SNV',
    'synonymous SNV',
    'unknown', # lowest precedence
                         ]
    Consensus_Columns:
        # Can specify either as dataset.columnName, or just absolute column name (which cannot contain "." character)
        Order: [ # if a column is not specified here, it will appear in a random order after the specified columns.
            Gene, 
#            Description, # uncomment if description column uncommented below
            Function, 
            ExonicFunction, 
            Max_Allele_Freq
            ]
        Gene: [Annovar_Gene_refGene, Annovar_Gene_knownGene, Annovar_Gene_wgEncodeGencodeBasicV19, refseq.geneName, refseq.name] # TODO add snpeff
#        Description: [gene_info.full_name_from_nomenclature_authority] # uncomment if gene_info imported
        Function: [Annovar_Func_refGene, Annovar_Func_knownGene, Annovar_Func_wgEncodeGencodeBasicV19] # TODO add snpeff
        ExonicFunction: [Annovar_ExonicFunc_refGene, Annovar_ExonicFunc_knownGene, Annovar_ExonicFunc_wgEncodeGencodeBasicV19] # TODO add snpeff
        Max_Allele_Freq: [
            # 1kg
            1kg_popfreq_all.pop_freq_max, 1kg_popfreq_all.1000g_all, 1kg_popfreq_all.1000g_afr, 1kg_popfreq_all.1000g_amr, 1kg_popfreq_all.1000g_eas, 1kg_popfreq_all.1000g_eur, 1kg_popfreq_all.1000g_sas, 1kg_popfreq_all.exac_all, 1kg_popfreq_all.exac_afr, 1kg_popfreq_all.exac_amr, 1kg_popfreq_all.exac_eas, 1kg_popfreq_all.exac_fin, 1kg_popfreq_all.exac_nfe, 1kg_popfreq_all.exac_oth, 1kg_popfreq_all.exac_sas, 1kg_popfreq_all.esp6500siv2_all, 1kg_popfreq_all.esp6500siv2_aa, 1kg_popfreq_all.esp6500siv2_ea, 
            uk10k.AF, 
            gonl.AF,
            #wellderly.AF, # uncomment if wellderly has been imported
            exac.AF
            ]
        
    Bed_Multimatch_Internal_Delimiter: '~||||~' # WARNING: do not modify this unless you know what you are doing! Will cause annotated output to be messed up if it conflicts with existing delimiters in the range datasets.
#    Bed_Internal_Delimiter: "	"
    Bed_Internal_Delimiter: '~|||~' # WARNING: do not modify this unless you know what you are doing! Will cause annotated output to be messed up if it conflicts with existing delimiters in the range datasets.
    
    
tiering:
    Max_Num_Variants_Per_Tier: 10000
    Filter_Pass_Values: ['PASS', '.', ''] # anything else in the FILTER column is a fail and that variant will be excluded from our tiered output
    Skip_Filter_Pass_Check_If_Needed: True # normally checks that all tiered variants have "PASS" in the FILTER column.
    Target_Gene_Lists:
        Clinical_Clinvar: 'config/gene_lists/clinvar_gene_specific_summary.txt'
        Clinical_Panel: 'config/gene_lists/genedx_names.txt' # currently genedx
        Clinical_Actionable: 'config/gene_lists/actionable_genes.txt'
        # Candidate gene list is user-specified at command-line ("--target_genes=(path to target gene list, 1 gene per line)")
    Rare_Allele_Frequency_Cutoff: 0.01 # as a decimal
    Gene_Name_Column: Gene_Summary
    Allele_Frequency_Columns: [Max_Allele_Freq_Summary]
    Functional_Columns: [Function_Summary, ExonicFunction_Summary]
    # for separating multiple threshold values for a given column (will check for a match with any of them)
    Column_Multiple_Threshold_Separator: '|'
    
    # Conservation info
    Conservation_Columns: ['dbnsfp.GERP++_RS', phastCons.MSA_MCE_score] # NOTE: currently missing dbnsfp_phyloP_pred
    Conservation_Thresholds: [2.0, 250] # thresholds/string matches for each column above (in the same order). If a number is given we look for values >= it, if a string is given we look for equality (exact case-sensitive match).
    Conservation_Global_Threshold: 2 # number of columns that must pass the above specified thresholds for the given variant to be considered "conserved". 
    
    # Pathogenicity info
    Pathogenicity_Columns: [dbnsfp.SIFT_pred, [dbnsfp.Polyphen2_HDIV_pred, dbnsfp.Polyphen2_HVAR_pred], dbnsfp.LRT_pred, dbnsfp.MutationTaster_pred]
    Pathogenicity_Thresholds: [D, [P|D, P|D], D, A|D]
    Pathogenicity_Global_Threshold: 2 # min number of datasets with pathogenic indication for the variant to be considered pathogenic (when tiering)
    
    # Tolerance info
    # currently we require the max of the z score columns to be greater than the cutoff
    Tolerance_Zscore_Columns: [exac_tol.mis_z, exac_tol.syn_z, exac_tol.lof_z]
    Tolerance_Zscore_Cutoff: 2

pgx:
    # TBA

trio:
    # TBA
